// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // Load A from instruction when it's an M instruction (0xxx...)
    Not(in=instruction[15], out=isMInstruction);
    
    // A Register.
    // Tt can be loaded with either an A instruction or from the ALU output.
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=inputForA);
    // It shoud store it's input if it's either 
    //  - an A instruction
    //  - The corresponding d bit is set (i[5])
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=loadA);
    ARegister(in=inputForA, load=loadA, out=aOut, out[0..14]=addressM);

    // D register
    And(a=instruction[15], b=instruction[4], out=loadDFromALU);
    DRegister(in=aluOut, load=loadDFromALU, out=dOut);


    // Feed A or M to the ALU depending on the instruction a bit [12]
    Mux16(a=aOut, b=inM, sel=instruction[12], out=amALUInput);

//
//    IN  // 16-bit inputs:
//        x[16], y[16],
//        // Control bits:
//        zx, // Zero the x input
//        nx, // Negate the x input
//        zy, // Zero the y input
//        ny, // Negate the y input
//        f,  // Function code: 1 for add, 0 for and
//        no; // Negate the out output
//
//    OUT // 16-bit output
//        out[16],
//
//        // ALU output flags
//        zr, // 1 if out=0, 0 otherwise
//        ng; // 1 if out<0, 0 otherwise

    ALU(x=dOut, y=amALUInput,
        
        zx=instruction[11], 
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f= instruction[7],
        no=instruction[6],
        
        out=outM, out=aluOut,
        zr=zr, ng=ng
    );


    // writeM flag
    And(a=instruction[15], b=instruction[3], out=writeM);

    // The program counter should load the value of A
    // when the jump condition is fulfilled.
    Not(in=ng, out=zeroOrPos);
    Not(in=zr, out=nonZero);
    And(a=nonZero, b=zeroOrPos, out=positive);

    And(a=instruction[2], b=ng, out=jumpNegative); // output negative
    And(a=instruction[1], b=zr, out=jumpZero); // output zero
    And(a=instruction[0], b=positive, out=jumpPositive); // output positive
    
    Or8Way(in[0]=jumpNegative, in[1]=jumpZero, in[2]=jumpPositive, out=jumpWantsToJump);
    
    And(a=instruction[15], b=jumpWantsToJump, out=jump); // when it's a C instruction


    PC(in=aOut, load=jump, inc=true, reset=reset, out[0..14]=pc);

}